version: "3.5"

services:

  app:
    build:
      context: .
    env_file:
      - dev.env
    volumes:
      - ./app:/app
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >-
      python manage.py runserver 0.0.0.0:8000
  
  db:
    image: postgres
    env_file:
      - dev.env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  minio:
    image: minio/minio
    hostname: "minio"
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - dev.env
    volumes:
      - ./data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    env_file:
      - dev.env
    entrypoint: >
      /bin/sh -c "
      apk add nc &&
      while ! nc -z minio 9000; do echo 'Wait minio to startup...' && sleep 0.1; done; sleep 5 &&
      /usr/bin/mc config host add myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb myminio/${DEFAULT_BUCKET_NAME};
      /usr/bin/mc policy download myminio/${DEFAULT_BUCKET_NAME};
      exit 0;
      "
    # profiles: [ init ]

  promtail:
    image: grafana/promtail:latest
    env_file:
      - dev.env
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    command: -config.file=/etc/promtail/promtail-config.yml -config.expand-env=true
    profiles:
      - monitoring
    
  loki:
    image: grafana/loki:latest
    env_file:
      - dev.env
    volumes:
      - ./data/loki:/loki
    ports:
      - 3100:3100
    profiles:
      - monitoring
  
  # TODO: add postgresql exporter, see https://nelsoncode.medium.com/how-to-monitor-posgresql-with-prometheus-and-grafana-docker-36d216532ea2
  prometheus:
    image: prom/prometheus
    env_file:
      - dev.env
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana
    env_file:
      - dev.env
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
      - ./data/grafana:/var/lib/grafana
    user: "1000"
    profiles:
      - monitoring

  redis:
    image: redis
    env_file:
      - dev.env
    command: redis-server
    ports:
      - "6379:6379"
  
  # TODO: add celery and flower
  # celery:
  #   restart: always
  #   build:
  #     context: .
  #   command: celery -A app worker -l info
  #   volumes:
  #     - ./app:/app
  #   env_file:
  #     - dev.env
  #   depends_on:
  #     - db
  #     - redis
  #     - app